{"head":{"title":"Design Patterns","date":"2012-12-31T00:00:00.000Z","layout":"Post","link":"http://asankan.info/2012/12/31/design-patterns/","author":"asankanissanka","description":"Design Patterns A pattern is a reusable solution that can be applied to commonly occurring problems in software design. Design patterns…","post_id":32,"created":"2012/12/31 16:30:00","created_gmt":"2012/12/31 16:30:00","comment_status":"open","post_name":"design-patterns","status":"publish","post_type":"post"},"body":"<h1 id=\"design-patterns\"><a href=\"#design-patterns\" class=\"phenomic-HeadingAnchor\">#</a>Design Patterns</h1>\n<p>A <strong>pattern</strong> is a reusable solution that can be applied to commonly occurring problems in software design. Design patterns have three main benefits as in the following.</p>\n<ul>\n<li>Provide solid approaches to solving issues in software development using proven techniques. </li>\n<li>Usually reflects an out of box solution that can be adapted to suit our needs </li>\n<li>Helps with expressing larger solutions elegantly</li>\n</ul>\n<p>Design Patterns can be categorized in to three main categories as in the following.</p>\n<p><strong> Creational Patterns</strong> - <em>Based on the concept of creating an object</em>  </p>\n<p>_<br>\n_   </p>\n<p>o   Abstract Factory</p>\n<p>Creates an instance of several families of classes</p>\n<p>o   Factory Method</p>\n<p>Creates an instance of several derived classes</p>\n<p>o   Prototype</p>\n<p>A fully initialized instance to be copied or cloned</p>\n<p>o   Singleton</p>\n<p>A class of which only a single instance can exist </p>\n<p> <strong>Structural Patterns</strong> - <em>Based on the idea of building blocks of objects</em></p>\n<p>_<br>\n_</p>\n<p>o   Adapter</p>\n<p>Match interfaces of different classes</p>\n<p>o   Bridge</p>\n<p>Separates an object’s interface from its implementation</p>\n<p>o   Composite</p>\n<p>A tree structure of simple and composite objects</p>\n<p><strong>Behavioral Patterns</strong> - <em>Based on the way object play and work together</em></p>\n<p>_<br>\n_   </p>\n<p>o   Mediator</p>\n<p>Defines simplified communication between classes</p>\n<p>o   Observer</p>\n<p>A way of notifying change to a number of classes</p>\n<p>o   Template Method</p>\n<p>Defer the exact steps of an algorithm to a subclass</p>\n","__filename":"posts/20121231-design-patterns.md","__url":"/posts/20121231-design-patterns/","__resourceUrl":"/posts/20121231-design-patterns/index.html","__dataUrl":"/posts/20121231-design-patterns/index.html.592b8bc426ed16af443514b05e4fa927.json"}